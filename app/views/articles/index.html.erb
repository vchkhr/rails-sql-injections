<h1>What Is SQL Injection?</h1>

<p>SQL Injection is a web application attack where the attacker “injects” SQL statements that will manipulate or access application data, whether it be sensitive or public. These attacks leverage areas in web applications that ask for user input. If user inputs in an app are not sanitized properly, an attacker can use a SQL injection to gain access to the associated app datastore.<p>

<h2 class="mt-5">An Example SQL Injection</h2>

<p>Attackers commonly use SQL injections to infiltrate web applications through user input. This includes form fills for usernames, user IDs, first and last names, and more. If you do not sanitize these inputs before accepting them or make strong use of parameterized SQL statements, an attacker can pass SQL statements through that input that unknowingly run on your database.</p>

<p>For example, say you are taking the input of a user ID in from a user. When your application fetches information about a user, the URL may look something like this:</p>

<pre><code class="language-sql">SELECT * FROM users WHERE id = '42'</code></pre>


<p>They enter their user ID, you take in their input, use it to find their information in your database, and display their data for them.</p>

<p>But, consider this: instead of inputting their user ID, they input what can be interpreted as a SQL query. For example:</p>

<pre><code class="language-sql">'42' OR '1'='1'</code></pre>

<p>If you take their input as-is, without sanitizing, this will result in a SQL query like:</p>

<pre><code class="language-sql">SELECT * FROM users WHERE id = '42' OR '1'='1';</code></pre>

<p>Since 1=1 is always true, this will return every data field for all users. This is a classic example of a SQL injection.</p>

<p>It’s important to note that this is the output the database is designed to give for this type of query. In this instance, the attacker is not looking to break the application you’ve made…just use what’s already available to access things they shouldn’t. When developing an application, try to consider what things might be accessible that shouldn’t be, and then implement ways to prevent that access from happening.</p>
